-- SQL query practice






--
-------- Creating Tables --------
--

# for commenting!
-- must be followed by at least one white space for commenting

CREATE TABLE trucks ( # creates table called "trucks"
    truck_id INT PRIMARY KEY, # first column of type INT that is also the primary key
    truck_name VARCHAR(20), -- only 20 since we want to allocate as little memory to names of x length!
    truck_brand VARCHAR(20)
    -- PRIMARY KEY(truck_id) -- equivalent way of saying truck_id is the primary key
);

DESCRIBE trucks; # describes the columns in the table trucks

# DROP TABLE trucks; -- drops (i.e. deletes) the table trucks

ALTER TABLE trucks ADD distance_travelled DECIMAL(7, 2); # Adds column in table trucks with storage DECIMAL(m,n)

ALTER TABLE trucks DROP COLUMN distance_travelled # Drops column called "distance_travelled" in table trucks






--
-------- Inserting Data --------
--

DESCRIBE trucks;

# cannot enter duplicate entries, so must change the primary key!

INSERT INTO trucks VALUES(1, 'Jack Mehov', 'Mercedes', 10000.00);

INSERT INTO trucks VALUES(2, 'Buster Cherry', 'Scania', 25000.00);

INSERT INTO trucks(truck_id, truck_name) VALUES(3, 'Mike Hunt'); # This inserts data when one attribute is not given

SELECT * FROM trucks; # selects and shows ALL entries in table trucks






--
-------- Constraints --------
--

DROP TABLE trucks;

CREATE TABLE trucks ( 
    truck_id INT PRIMARY KEY, 
    truck_name VARCHAR(20) UNIQUE NOT NULL, # this attribute cannot take the value of NULL and is unique
    truck_brand VARCHAR(20),
    distance_travelled DECIMAL(7,2) DEFAULT 0 # so if there is no value here, it defaults
);

DESCRIBE trucks;

SELECT * FROM trucks;

INSERT INTO trucks VALUES(1, 'Jack Mehov', 'Mercedes', 10000.00);

INSERT INTO trucks VALUES(2, 'Buster Cherry', 'Scania', 25000.00);

INSERT INTO trucks VALUES(3, 'Mike Hunt', 'Renault', 14000.00);

INSERT INTO trucks(truck_id, truck_name, truck_brand) VALUES(4, 'Yuri Nator', 'MG');

#INSERT INTO trucks(truck_id, truck_name) VALUES(3, 'Mike Hunt');

###### Auto increment ######

DROP TABLE trucks;

CREATE TABLE trucks ( 
    truck_id INT AUTO_INCREMENT PRIMARY KEY, # auto increments from the first entry and thereafter
    truck_name VARCHAR(20) UNIQUE NOT NULL, # this attribute cannot take the value of NULL and is unique
    truck_brand VARCHAR(20),
    distance_travelled DECIMAL(7,2) DEFAULT 0 # so if there is no value here, it defaults
);

INSERT INTO trucks(truck_name, truck_brand) VALUES('Jack Mehov', 'Mercedes');
INSERT INTO trucks(truck_name, truck_brand) VALUES('Buster Cherry', 'Scania');
INSERT INTO trucks(truck_name, truck_brand) VALUES('Mike Hunt', 'Renault');
INSERT INTO trucks(truck_name, truck_brand) VALUES('Yuri Nator', 'MG');

SELECT * FROM trucks;






--
-------- Update & Delete --------
--

DROP TABLE trucks;

CREATE TABLE trucks ( 
    truck_id INT AUTO_INCREMENT PRIMARY KEY, 
    truck_name VARCHAR(20) UNIQUE NOT NULL, # this attribute cannot take the value of NULL and is unique
    truck_brand VARCHAR(20),
    distance_travelled DECIMAL(7,2) DEFAULT 0 # so if there is no value here, it defaults
);

INSERT INTO trucks(truck_name, truck_brand) VALUES('Jack Mehov', 'Mercedes');
INSERT INTO trucks(truck_name, truck_brand) VALUES('Buster Cherry', 'Scania');
INSERT INTO trucks(truck_name, truck_brand) VALUES('Mike Hunt', 'Renault');
INSERT INTO trucks(truck_name, truck_brand) VALUES('Yuri Nator', 'MG');
INSERT INTO trucks(truck_name, truck_brand) VALUES('Ben Dover', 'Mercedes');
INSERT INTO trucks(truck_name, truck_brand) VALUES('Jerrick Miave', 'Ford');

INSERT INTO trucks(truck_name, truck_brand) VALUES('Tim Buxton', 'Ford');

SELECT * FROM trucks;

UPDATE trucks
SET truck_brand = 'Merc'
WHERE truck_brand = 'Mercedes';

UPDATE trucks
SET truck_brand = 'Ford & MG'
WHERE truck_brand = 'MG' OR truck_brand = 'Ford'; # OR logic statement used here

DELETE FROM trucks
WHERE truck_name = 'Tim Buxton' AND truck_brand = 'Ford & MG';






--
-------- Basic Queries --------
--

# Introduction into writing queries, such as querying databases with millions of entries

SELECT * FROM trucks; # taking all tables from trucks

SELECT truck_name, truck_brand
FROM trucks;

SELECT trucks.truck_name, trucks.truck_brand # this shows exactly which table is under extraction
FROM trucks
ORDER BY truck_name DESC; # DESC == descending whereas ASC == ascending

SELECT trucks.truck_name, trucks.truck_brand
FROM trucks
WHERE truck_brand = 'Ford & MG' OR truck_brand = 'Renault';

SELECT trucks.truck_name, trucks.truck_brand
FROM trucks
WHERE truck_brand <> 'Merc' and truck_brand <> 'Renault'; # returns non Merc and Renault truck_brand

SELECT *
FROM trucks
WHERE truck_brand IN ('Scania', 'Merc') AND truck_id >= 2;

DROP TABLE trucks;






--
-------- Creating a Big Database (database taken from CodeAcademy) --------
--

CREATE TABLE employee (
  emp_id INT PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(40),
  birth_day DATE,
  sex VARCHAR(1),
  salary INT,
  super_id INT,
  branch_id INT
);

CREATE TABLE branch (
  branch_id INT PRIMARY KEY,
  branch_name VARCHAR(40),
  mgr_id INT,
  mgr_start_date DATE,
  FOREIGN KEY(mgr_id) REFERENCES employee(emp_id) ON DELETE SET NULL
);

ALTER TABLE employee 
ADD FOREIGN KEY(branch_id)
REFERENCES branch(branch_id) # adds branch_id in the employee table as a foreign key to the 
ON DELETE SET NULL;          # branch_id in the branch table

ALTER TABLE employee
ADD FOREIGN KEY(super_id)
REFERENCES employee(emp_id)
ON DELETE SET NULL;

CREATE TABLE client (
  client_id INT PRIMARY KEY,
  client_name VARCHAR(40),
  branch_id INT,
  FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE SET NULL
);

CREATE TABLE works_with (
  emp_id INT,
  client_id INT,
  total_sales INT,
  PRIMARY KEY(emp_id, client_id), # composite primary key, where each component is a foreign key
  FOREIGN KEY(emp_id) REFERENCES employee(emp_id) ON DELETE CASCADE, # note the CASCADE and not SET NULL
  FOREIGN KEY(client_id) REFERENCES client(client_id) ON DELETE CASCADE
);

CREATE TABLE branch_supplier (
  branch_id INT,
  supplier_name VARCHAR(40),
  supply_type VARCHAR(40),
  PRIMARY KEY(branch_id, supplier_name),
  FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE CASCADE
);


-- -----------------------------------------------------------------------------

-- Corporate
INSERT INTO employee VALUES(100, 'David', 'Wallace', '1967-11-17', 'M', 250000, NULL, NULL);
# NULL for branch_id as the branch 1 has not been created yet!

INSERT INTO branch VALUES(1, 'Corporate', 100, '2006-02-09');
# now Corporate branch is being created, so we must update David Wallace to have the branch_id

UPDATE employee
SET branch_id = 1
WHERE emp_id = 100;

INSERT INTO employee VALUES(101, 'Jan', 'Levinson', '1961-05-11', 'F', 110000, 100, 1);

-- Scranton
INSERT INTO employee VALUES(102, 'Michael', 'Scott', '1964-03-15', 'M', 75000, 100, NULL);

INSERT INTO branch VALUES(2, 'Scranton', 102, '1992-04-06');

UPDATE employee
SET branch_id = 2
WHERE emp_id = 102;

INSERT INTO employee VALUES(103, 'Angela', 'Martin', '1971-06-25', 'F', 63000, 102, 2);
INSERT INTO employee VALUES(104, 'Kelly', 'Kapoor', '1980-02-05', 'F', 55000, 102, 2);
INSERT INTO employee VALUES(105, 'Stanley', 'Hudson', '1958-02-19', 'M', 69000, 102, 2);

-- Stamford
INSERT INTO employee VALUES(106, 'Josh', 'Porter', '1969-09-05', 'M', 78000, 100, NULL);

INSERT INTO branch VALUES(3, 'Stamford', 106, '1998-02-13');

UPDATE employee
SET branch_id = 3
WHERE emp_id = 106;

INSERT INTO employee VALUES(107, 'Andy', 'Bernard', '1973-07-22', 'M', 65000, 106, 3);
INSERT INTO employee VALUES(108, 'Jim', 'Halpert', '1978-10-01', 'M', 71000, 106, 3);


-- BRANCH SUPPLIER
INSERT INTO branch_supplier VALUES(2, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Patriot Paper', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'J.T. Forms & Labels', 'Custom Forms');
INSERT INTO branch_supplier VALUES(3, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(3, 'Stamford Lables', 'Custom Forms');

UPDATE branch_supplier
SET supplier_name = 'Stamford Labels'
WHERE supplier_name = 'Stamford Lables'; # This corrects the mistake given in the code!

-- CLIENT
INSERT INTO client VALUES(400, 'Dunmore Highschool', 2);
INSERT INTO client VALUES(401, 'Lackawana Country', 2);
INSERT INTO client VALUES(402, 'FedEx', 3);
INSERT INTO client VALUES(403, 'John Daly Law, LLC', 3);
INSERT INTO client VALUES(404, 'Scranton Whitepages', 2);
INSERT INTO client VALUES(405, 'Times Newspaper', 3);
INSERT INTO client VALUES(406, 'FedEx', 2);

-- WORKS_WITH
INSERT INTO works_with VALUES(105, 400, 55000);
INSERT INTO works_with VALUES(102, 401, 267000);
INSERT INTO works_with VALUES(108, 402, 22500);
INSERT INTO works_with VALUES(107, 403, 5000);
INSERT INTO works_with VALUES(108, 403, 12000);
INSERT INTO works_with VALUES(105, 404, 33000);
INSERT INTO works_with VALUES(107, 405, 26000);
INSERT INTO works_with VALUES(102, 406, 15000);
INSERT INTO works_with VALUES(105, 406, 130000);


SELECT * 
FROM employee
ORDER BY sex, last_name, first_name; # order by sex first, then last_name then first_name

SELECT *
FROM employee
LIMIT 5; # selects from employee but only the first 5 entries

SELECT first_name AS forename, last_name AS surname # this lets you rename the columns using AS
FROM employee;

SELECT DISTINCT sex # DISTINCT shows all the different values stored in table employee
FROM employee;






--
-------- Functions --------
--

SELECT COUNT(emp_id) FROM employee; # returns the number of entries in emp_id from employee

SELECT COUNT(emp_id) # number of female employees born after 1970-01-01
FROM employee
WHERE sex = 'F' AND birth_day > '1970-01-01';

SELECT AVG(salary) # gives mean average
FROM employee
WHERE sex = 'M';

SELECT SUM(salary) # total salaries
FROM employee;

### using aggregation ##

SELECT COUNT(sex), sex # counts entries in sex and then what the attribute per group is
FROM employee
GROUP BY sex;          # groups the counted entries by sex

SELECT emp_id, SUM(total_sales)
FROM Works_with
GROUP BY emp_id;






--
-------- Wildcards --------
--

-- % = any number of characters before/after, whereas _ = one character
-- hence %label% will take any number of characters before the first character in 'label' 
-- and any number of characters after the last character in 'label'

SELECT * 
FROM client
WHERE client_name LIKE '%LLC'; # to find entries LIKE that is queried, so %LLC is any number
                               # of characters before the LLC string


SELECT *
FROM branch_supplier
WHERE supplier_name LIKE '%label%';

SELECT *
FROM employee
WHERE birth_day LIKE '____-10%'; # returns any employees born in October since using four _







--
-------- Unions --------
--

SELECT first_name AS Name FROM employee # if no 'AS name' then the first column selected will keep the 
UNION                                   # header, which in this case would be first_name
SELECT branch_name FROM branch # UNION returns all entries in one column
UNION
SELECT client_name FROM client;

# To UNION you must have the same number of columns from where you are selecting and a similar data type
# for example INT and INT or string and string, and NOT INT and string!

SELECT client_id AS id, client_name AS name FROM client
UNION
SELECT branch_supplier.branch_id, supplier_name FROM branch_supplier;







--
-------- Joins --------
--

INSERT INTO branch VALUES(4, 'Buffalo', NULL, NULL);

SELECT employee.emp_id, employee.first_name, employee.last_name, branch.branch_name # order of columns
from employee                                                                       # defined here
JOIN branch                          # joins branch and employee together ON the
ON employee.emp_id = branch.mgr_id;  # employee.emp_id = branch.mgr_id column, where ONLY the names
                                     # with a value in branch_name are included

SELECT employee.emp_id, employee.first_name, employee.last_name, branch.branch_name 
from employee                                                                      
LEFT JOIN branch                     # this will include all the rows in employee table that are not         
ON employee.emp_id = branch.mgr_id;  # linked to a branch_name, as the employee table is the "left" table
                                     # i.e. all the values from the left table are included regardless
                                     # of meeting the criteria or not

SELECT employee.emp_id, employee.first_name, employee.last_name, branch.branch_name 
from employee                                                                      
RIGHT JOIN branch                    # hence RIGHT JOIN will use all the values from the right table
ON employee.emp_id = branch.mgr_id;  # where the "right" table is branch, therefore all branches will
                                     # be included in the joined table

# there is another join, known as FULL OUTER JOIN, which is LEFT and RIGHT combined, but this is not
# in MySQL, so we cannot use it.






--
-------- Nested Queries --------
--

SELECT works_with.emp_id 
FROM works_with 
WHERE total_sales > 30000;      # this query is nested in the one below!

SELECT employee.first_name, employee.last_name 
FROM employee
WHERE employee.emp_id IN (      # you must indent the inserted query
    SELECT works_with.emp_id 
    FROM works_with
    WHERE total_sales > 30000
);

SELECT client.client_name
FROM client
WHERE client.branch_id = (
    SELECT branch.branch_id
    FROM branch
    WHERE branch.mgr_id = 102   # we are assuming we already know Michael Scott's emp_id
    LIMIT 1                     # however this statement is not guaranteed to return just one value
);                              # so we LIMIT, otherwise if you are looking for multiple values, use
                                # IN (listed values go here) rather than = [value chosen for query]






--
-------- On Delete --------
--


# ON DELETE SET NULL is where deletion of entries will change keys into NULL

CREATE TABLE branch (
  branch_id INT PRIMARY KEY,
  branch_name VARCHAR(40),
  mgr_id INT,
  mgr_start_date DATE,
  FOREIGN KEY(mgr_id) REFERENCES employee(emp_id) ON DELETE SET NULL     # note the NULL
);

DELETE FROM employee    # The command to delete Michael Scott from the table employee
WHERE emp_id = 102;     # doing this will mean the mgr_id in the branch table becomes NULL
                        # since Michael Scott no longer exists in the employee table
                        # hence the super_id in table employee will also become NULL since Michael
                        # Scott was a supervisor to other employees

# ON DELETE CASCADE deletes all entries relating to what has been deleted, rather than setting other
# entries to NULL

CREATE TABLE branch_supplier (
  branch_id INT,
  supplier_name VARCHAR(40),
  supply_type VARCHAR(40),
  PRIMARY KEY (branch_id, supplier_name),
  FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE SET CASCADE   # note the CASCADE
);

DELETE FROM branch
WHERE branch_id = 2;

SELECT * from branch_supplier;   # hence CASCADE deletes all entries that use the branch supplier with
                                 # branch_id = 2, rather than setting all entries with branch_id = 2 to NULL


# if PRIMARY KEY, then use CASCADE as a primary key cannot be NULL !






--
-------- Triggers --------
--


-- When something in a table changes a trigger can be made to alert of the change.
-- But triggers need to be written in the MySQL command line !
-- This is so that we can change the DELIMITER in MySQL since we want to use ; as well as continue
-- defining the trigger without telling SQL to end the command


CREATE TABLE trigger_test (     -- creates table for trigger
    message VARCHAR(100)
);

SELECT * FROM trigger_test;     -- shows all the trigger messages that have occurred

# the following must be done in the MySQL command line since you cannot change the DELIMITER in popSQL

DELIMITER $$                    -- creates the delimiter
CREATE TRIGGER my_trigger       -- need a new trigger name for each trigger created
BEFORE INSERT                   -- can also be AFTER INSERT and etc
ON employee
FOR EACH ROW 
BEGIN
    INSERT INTO trigger_test VALUES('Yo ay wot');    -- trigger message is inserted into trigger_test
END $$
DELIMITER ;                     -- changes the delimiter back to ;

# end of what needs to be done in the MySQL command line

INSERT INTO employee
VALUES(109, 'OSCAR', 'MARTINEZ', '1978-02-19', 'M', 69000, 106, 3);

DELETE FROM employee
WHERE emp_id = 109;

SELECT * FROM employee;

SELECT * FROM trigger_test;      -- if a trigger happens then it will be recorded in here rather than be
                                 -- displayed in the console 

DROP TABLE trigger_test;         -- to reset the trigger message table

### function trigger ###

DELIMITER $$                    -- creates the delimiter
CREATE TRIGGER my_trigger1
BEFORE INSERT 
ON employee
FOR EACH ROW 
BEGIN
    INSERT INTO trigger_test VALUES(NEW.first_name);    -- NEW is a function for the new entry being
                                                        -- inserted into the table
END $$
DELIMITER ;


INSERT INTO employee
VALUES(110, 'Kevin', 'Malone', '1978-02-21', 'M', 71000, 106, 3);

SELECT * FROM trigger_test;           # which should now include the first_name of the inserted entry

### if elif else logic ###

DELIMITER $$                    -- creates the delimiter
CREATE TRIGGER my_trigger2
BEFORE INSERT 
ON employee
FOR EACH ROW BEGIN
    IF NEW.sex = 'M' THEN                                            # note the requirement to use THEN after the condition
        INSERT INTO trigger_test VALUES('added male employee');
    ELSEIF NEW.sex = 'F' THEN
        INSERT INTO trigger_test VALUES('added female employee');
    ELSE
        INSERT INTO trigger_test VALUES('added other employee');
    END IF;                                                          # must use END IF; to end the logic statements
END $$
DELIMITER ;

INSERT INTO employee
VALUES(111, 'Pam', 'Beesly', '1988-04-02', 'F', 83560, 106, 3);

SELECT * FROM trigger_test;

# can also INSERT AFTER instead of BEFORE
